import streamlit as st

from utils import *
from plot import *


def show_main_page():
    # Initialize session state for dataframe
    if 'df' not in st.session_state:
        st.session_state.df = None
    
    # File uploader for JSON files
    file = st.sidebar.file_uploader("Add your JSON files", accept_multiple_files=False, type='json')
    btn = st.sidebar.button("–í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥")
    
    # Handle file loading
    if file is not None:
        # New file uploaded
        if isinstance(file, str):  # Handle the case where file is a string
            df = read_json(open(file, 'r', encoding='utf-8'))
        else:
            df = read_json(file)
        st.session_state.df = df  # Store in session state
    elif btn:
        # Example button clicked
        df = read_json(open('result.json', 'r', encoding='utf-8'))
        st.session_state.df = df  # Store in session state
    
    # Process data if available
    if st.session_state.df is not None:
        df = st.session_state.df
        df['date'] = pd.to_datetime(df['date'])
        df['year'] = df['date'].dt.year
        
        # Get unique years for multiselect
        unique_years = sorted(df['year'].unique())
        if len(unique_years) > 0:
            selected_years = st.sidebar.multiselect(
            "Select Years", 
            unique_years,
            default=unique_years  # Default to all years selected
            )
            
            # Add global chart scaling checkbox to sidebar
            scale_charts = st.sidebar.checkbox(
                "–ú–∞—Å—à—Ç–∞–±—É–≤–∞—Ç–∏ –¥—ñ–∞–≥—Ä–∞–º–∏ –≤—ñ–¥–Ω–æ—Å–Ω–æ –¥–∞–Ω–∏—Ö", 
                value=True
            )
            
            # If no years selected, use all years
            if not selected_years:
                selected_years = unique_years
                
            # Filter data by selected years
            filtered_df = df[df['year'].isin(selected_years)]
            
            show_avg_and_max_len(filtered_df)
            
            one, two = st.columns(2)
            
            with one:
                plot_heatmap(filtered_df)
            
            with two:
                plot_pie(filtered_df)
            
            plot_emoji(filtered_df, scale_charts)
            plot_media_type(filtered_df, scale_charts)
            plot_stacked_bar_chart(filtered_df)
    else:
        st.header("–í—ñ—Ç–∞—î–º–æ —É Telegram Chat Analyzer! üéâ")
        st.write("–¶–µ–π —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–æ–ø–æ–º–æ–∂–µ –≤–∞–º –¥–æ—Å–ª—ñ–¥–∏—Ç–∏ –≤–∞—à—ñ —á–∞—Ç–∏ —É Telegram.")
        st.write("–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ JSON-—Ñ–∞–π–ª, —â–æ–± –ø–æ—á–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑ –≤–∞—à–∏—Ö —Ä–æ–∑–º–æ–≤.")
        st.markdown("### –©–æ –≤–∏ –º–æ–∂–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ —Ç—É—Ç?")
        st.write("- –ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —É —á–∞—Ç–∞—Ö –∑–∞ —Ä–æ–∫–∞–º–∏.")
        st.write("- –î–æ—Å–ª—ñ–¥–∂—É–≤–∞—Ç–∏ –Ω–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à—ñ –µ–º–æ–¥–∑—ñ, –º–µ–¥—ñ–∞ —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        st.write("- –í—ñ–∑—É–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ —Ç–∞ –¥—ñ–∞–≥—Ä–∞–º.")
        st.markdown("### –Ø–∫ –ø–æ—á–∞—Ç–∏?")
        st.write("–ü—Ä–æ—Å—Ç–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ JSON-—Ñ–∞–π–ª –∑ –≤–∞—à–∏–º–∏ —á–∞—Ç–∞–º–∏ —É –±–æ–∫–æ–≤—ñ–π –ø–∞–Ω–µ–ª—ñ, —ñ –º–∏ –∑—Ä–æ–±–∏–º–æ –≤—Å–µ —ñ–Ω—à–µ!")
        st.write("üöÄ –ì–æ—Ç–æ–≤—ñ? –ü–æ—á–Ω–µ–º–æ!")
